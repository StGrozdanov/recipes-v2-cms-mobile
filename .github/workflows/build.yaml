name: build

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
env:
  PATH_PREFIX: ${{ github.workspace }}
  CACHE_PREFIX: ""

jobs:
  install_app:
    name: Install
    runs-on: ubuntu-latest
    outputs:
      cache-path: ${{ steps.app-cache.outputs.path }}
      cache-key: ${{ steps.app-cache.outputs.key }}
      cache-restore: ${{ steps.app-cache.outputs.restore }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      - name: Set cache outputs
        id: app-cache
        run: |
          echo "path=${{ env.PATH_PREFIX }}/node_modules" >> $GITHUB_OUTPUT
          echo "key=${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}" >> $GITHUB_OUTPUT
          echo "restore=${{ format('{0}node_modules-', env.CACHE_PREFIX) }}" >> $GITHUB_OUTPUT
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.app-cache.outputs.path }}
          key: ${{ steps.app-cache.outputs.key }}
          restore-keys: ${{ steps.app-cache.outputs.restore }}
      - name: Install dependencies
        id: install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci 
      - name: Run post-install scripts
        if: steps.install.outcome == 'success'
        run: npm rebuild && npm run prepare --if-present

  typecheck_app:
    name: Typechecks
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}
      - name: Run type checks
        run: npm run type-check

  lint_app:
    name: Linters
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}      
      - name: Run Linters
        run: npm run lint

  unit_test_app:
    name: Unit Tests
    needs: [install_app]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory || github.workspace }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      - name: Load dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_PREFIX }}/node_modules
          key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}
      - name: Run tests
        run: npm run test

  # integration_test_app:
  #   name: Integration Tests
  #   needs: [install_app]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   defaults:
  #     run:
  #       working-directory: ${{ inputs.working-directory || github.workspace }}
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3      
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.10.0
  #         cache: "npm"
  #         cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
  #     - name: Load dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ env.PATH_PREFIX }}/node_modules
  #         key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}  
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Run Playwright tests
  #       run: npm run test:int
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 10

  # deploy_nonprod:
  #   name: Deploy Nonprod
  #   needs: [typecheck_app, lint_app, unit_test_app, integration_test_app]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
      
  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: |
  #         url="$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})"
  #         vercel alias --token=${{ secrets.VERCEL_TOKEN }} set "$url" ${{ secrets.NON_PROD_DOMAIN }}

  # e2e_test_app:
  #   name: e2e tests
  #   needs: [deploy_nonprod]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   defaults:
  #     run:
  #       working-directory: ${{ inputs.working-directory || github.workspace }}
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3      
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 20.10.0
  #         cache: "npm"
  #         cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
  #     - name: Load dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ${{ env.PATH_PREFIX }}/node_modules
  #         key: ${{ format('{0}node_modules-{1}', env.CACHE_PREFIX, hashFiles(format('{0}/package-lock.json', env.PATH_PREFIX))) }}  
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Run tests
  #       run: npm run test:e2e
  #       env:
  #         BASE_URL: ${{ env.PREVIEW_URL }}
  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: e2e/playwright-report/
  #         retention-days: 10

  deploy_prod:
    name: Deploy Prod
    needs: [typecheck_app, lint_app, unit_test_app]
    runs-on: ubuntu-latest
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v3
      - name: üèó Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
          cache: "npm"
          cache-dependency-path: ${{ env.PATH_PREFIX }}/package-lock.json
      - name: üèó Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: üì¶ Install dependencies
        run: npm install
      - name: üöÄ Create update
        run: eas update --auto --non-interactive
